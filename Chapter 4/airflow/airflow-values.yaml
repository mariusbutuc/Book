airflowVersion: "2.9.1"
webserverSecretKey: secretAirflowWebserverSecretKey
executor: "KubernetesExecutor"
uid: 1000
gid: 100

volumes:
  - name: airflow-shared
    persistentVolumeClaim:
      claimName: airflow-efs-shared

volumeMounts:
  - name: airflow-shared
    mountPath: /opt/airflow/dags
    subPath: airflow_home/dags
  - name: airflow-shared
    mountPath: /var/log/airflow
    subPath: airflow_home/logs

airflow:
  config:
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 10
    AIRFLOW__LOGGING__BASE_LOG_FOLDER: /var/log/airflow
    AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: /var/log/airflow/dag_processor_manager/dag_processor_manager.log
    AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: /var/log/airflow/scheduler

config:
  core:
    min_serialized_dag_fetch_interval: 1
  logging:
    base_log_folder: /var/log/airflow
    child_process_log_directory: /var/log/airflow/scheduler
  webserver:
    base_url: "https://platform.mlopsbook.online/airflow"


dags:
  mountPath: "/opt/airflow/dags"
  gitSync:
    enabled: false
    repo: https://github.com/KubedAI/airflow-dags.git
    branch: main
    rev: HEAD
    depth: 1


worker:
  replicas: 0

ingress:
  web:
    enabled: true
    path: "/airflow"
    hosts:
      - name: "platform.mlopsbook.online"
        tls:
          enabled: false
    ingressClassName: "nginx"
  flower:
    enabled: false

#scheduler:
  #extraInitContainers:
  #  - name: fix-permissions
  #    image: busybox
  #    command:
  #    - sh
  #    - -c
  #    - |
  #      chown -R 1000:100 /mnt/shared-dir
  #    securityContext:
  #      runAsUser: 0
  #    volumeMounts:
  #    - name: airflow-shared
  #      mountPath: /mnt/shared-dir


webserver:
  webserverConfig: | 
      import jwt
      import logging
      import os
      import requests

      from base64 import b64decode
      from cryptography.hazmat.primitives import serialization
      from tokenize import Exponent

      from flask_appbuilder import expose
      from flask_appbuilder.security.views import AuthOAuthView

      from airflow.www.fab_security.manager import AUTH_OAUTH
      from authlib.integrations.flask_client import OAuth
      from airflow.auth.managers.fab.security_manager.override import FabAirflowSecurityManagerOverride

      log = logging.getLogger(__name__)

      AUTH_TYPE = AUTH_OAUTH

      AUTH_USER_REGISTRATION = True
      AUTH_USER_REGISTRATION_ROLE = "User"
      AUTH_ROLES_SYNC_AT_LOGIN = True

      AUTH_ROLES_MAPPING = {
        "airflow_admin": ["Admin"],
        "airflow_op": ["Op"],
        "airflow_user": ["User"],
        "airflow_viewer": ["Viewer"],
        "airflow_public": ["Public"],
      }


      OIDC_ISSUER = "https://auth.mlopsbook.online/realms/master/"
      CLIENT_ID = "airflow"
      OIDC_PROVIDER = "keycloak"
      
      
      access_token_url = "https://auth.mlopsbook.online/realms/master/protocol/openid-connect/token"
      api_base_url = "https://auth.mlopsbook.online/realms/master/protocol/openid-connect"
      
      authorize_url = "https://auth.mlopsbook.online/realms/master/protocol/openid-connect/auth"
      client_secret = "iJNbWxkN7Ifi9uKEY0NRKAmBnEYkD0uf"
      jwks_uri = "https://auth.mlopsbook.online/realms/master/protocol/openid-connect/certs"
      
    
      OAUTH_PROVIDERS = [{
          "name": "keycloak",
          "token_key": "access_token",
          "icon": "fa-key",
          "remote_app": {
              "api_base_url": api_base_url,
              "client_kwargs": {
                  "scope": "email profile openid roles",
                  'token_endpoint_auth_method': 'client_secret_post'
              },
              "access_token_url": access_token_url,
              "authorize_url": authorize_url,
              "request_token_url": None,
              "jwks_uri": jwks_uri,
              "redirect_uri": "https://platform.mlopsbook.online/airflow/home",
              "client_id": "airflow",
              "client_secret": client_secret,
          }
      }]


      req = requests.get(OIDC_ISSUER)
      key_der_base64 = req.json()["public_key"]
      key_der = b64decode(key_der_base64.encode())
      public_key = serialization.load_der_public_key(key_der)

      class CustomAuthRemoteUserView(AuthOAuthView):
        @expose("/logout/")
        def logout(self):
          """Delete access token before logging out."""
          return super().logout()

      class CustomSecurityManager(FabAirflowSecurityManagerOverride):
        authoauthview = CustomAuthRemoteUserView

        def oauth_user_info(self, provider, response):
          if provider == "keycloak":
            token = response["access_token"]
            me = jwt.decode(token, public_key, algorithms=['HS256', 'RS256'], audience=CLIENT_ID)
            log.info(me)
            groups = me["resource_access"]["airflow"]["roles"]
            if len(groups) < 1:
                groups = ["airflow_public"]
            else:
                groups = [str for str in groups if "airflow" in str]
            userinfo = {
                "username": me.get("preferred_username"),
                "email": me.get("email"),
                "first_name": me.get("given_name"),
                "last_name": me.get("family_name"),
                "role_keys": groups,
            }
            log.info("user info: {0}".format(userinfo))
            return userinfo
          else:
            return {}

      SECURITY_MANAGER_CLASS = CustomSecurityManager
