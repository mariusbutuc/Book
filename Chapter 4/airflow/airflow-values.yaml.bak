airflowVersion: "2.9.1"
airflow:
  config:
    AIRFLOW__WEBSERVER__BASE_URL: https://platform.mlopsbook.online/airflow/
    AIRFLOW__CORE__LOAD_EXAMPLES: true
  
  executor: "KubernetesExecutor"

  ## the fernet encryption key (sets `AIRFLOW__CORE__FERNET_KEY`)
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/security/set-fernet-key.md
  ## [WARNING] change from default value to ensure security
  #fernetKey: String_SecretFerneyKey

  ## the secret_key for flask (sets `AIRFLOW__WEBSERVER__SECRET_KEY`)
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/security/set-webserver-secret-key.md
  ## [WARNING] change from default value to ensure security
  #webserverSecretKey: String_SecretWebserverSecretKey


dags:
  gitSync:
    enabled: false
    repo: https://github.com/KubedAI/airflow-dags.git
    branch: main
    rev: HEAD
    depth: 1
    #persistence:
    #enabled: true
    #storageClassName: efs-sc
    #accessMode: ReadOnlyMany
    #existingClaim: airflow-efs-claim


executor: "KubernetesExecutor"

flower:
  enabled: false

ingress:
  enabled: true
  web:
    enabled: true
    path: "/airflow"
    pathType: "ImplementationSpecific"
    host: "platform.mlopsbook.online"
    hosts:
      - name: "platform.mlopsbook.online"
        tls:
          enabled: false
    ingressClassName: "nginx"

redis:
  enabled: false

workers:
  replicas: 0

web:
  webserverConfig:
    enabled: true
    stringOverride: |
      import jwt
      import logging
      import os
      import requests

      from base64 import b64decode
      from cryptography.hazmat.primitives import serialization
      from tokenize import Exponent

      from flask_appbuilder import expose
      from flask_appbuilder.security.views import AuthOAuthView

      from airflow.www.fab_security.manager import AUTH_OAUTH
      from authlib.integrations.flask_client import OAuth
      #from airflow.www.security import AirflowSecurityManager
      from airflow.auth.managers.fab.security_manager.override import FabAirflowSecurityManagerOverride

      log = logging.getLogger(__name__)

      AUTH_TYPE = AUTH_OAUTH
      
      AUTH_USER_REGISTRATION = True
      AUTH_USER_REGISTRATION_ROLE = "User"
      AUTH_ROLES_SYNC_AT_LOGIN = True

      AUTH_ROLES_MAPPING = {
        "airflow_admin": ["Admin"],
        "airflow_op": ["Op"],
        "airflow_user": ["User"],
        "airflow_viewer": ["Viewer"],
        "airflow_public": ["Public"],
      }


      OIDC_ISSUER = "https://auth.mlopsbook.online/realms/master/"
      CLIENT_ID = "airflow"
      OIDC_PROVIDER = "keycloak"

      OAUTH_PROVIDERS = [{
          "name": "keycloak",
          "token_key": "access_token",
          "icon": "fa-key",
          "remote_app": {
              "api_base_url": "https://auth.mlopsbook.online/realms/master/protocol/openid-connect",
              "client_kwargs": {
                  "scope": "email profile openid roles",
                  'token_endpoint_auth_method': 'client_secret_post'
              },
              "access_token_url": "https://auth.mlopsbook.online/realms/master/protocol/openid-connect/token",
              "authorize_url": "https://auth.mlopsbook.online/realms/master/protocol/openid-connect/auth",
              "request_token_url": None,
              "jwks_uri": "https://auth.mlopsbook.online/realms/master/protocol/openid-connect/certs",
              "client_id": "airflow",
              "client_secret": "iJNbWxkN7Ifi9uKEY0NRKAmBnEYkD0uf",
          }
      }]

      req = requests.get(OIDC_ISSUER)
      key_der_base64 = req.json()["public_key"]
      key_der = b64decode(key_der_base64.encode())
      public_key = serialization.load_der_public_key(key_der)

      class CustomAuthRemoteUserView(AuthOAuthView):
        @expose("/logout/")
        def logout(self):
          """Delete access token before logging out."""
          return super().logout()

          #class CustomSecurityManager(AirflowSecurityManager):
      class CustomSecurityManager(FabAirflowSecurityManagerOverride):
        authoauthview = CustomAuthRemoteUserView

        def oauth_user_info(self, provider, response):
          if provider == "keycloak":
            token = response["access_token"]
            me = jwt.decode(token, public_key, algorithms=['HS256', 'RS256'], audience=CLIENT_ID)
            # sample of resource_access
            # {
            #   "resource_access": { "airflow": { "roles": ["airflow_admin"] }}
            # }
            log.info(me)
            groups = me["resource_access"]["airflow"]["roles"] # unsafe
            if len(groups) < 1:
                groups = ["airflow_public"]
            else:
                groups = [str for str in groups if "airflow" in str]
            userinfo = {
                "username": me.get("preferred_username"),
                "email": me.get("email"),
                "first_name": me.get("given_name"),
                "last_name": me.get("family_name"),
                "role_keys": groups,
            }
            log.info("user info: {0}".format(userinfo))
            return userinfo
          else:
            return {}
      SECURITY_MANAGER_CLASS = CustomSecurityManager

